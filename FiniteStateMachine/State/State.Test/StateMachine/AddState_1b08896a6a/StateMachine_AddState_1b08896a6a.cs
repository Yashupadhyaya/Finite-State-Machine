// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;

namespace YourNamespace
{
    [TestFixture]
    public class FiniteStateMachineTests
    {
        [Test]
        public void TestAddState_SameStateMachine_Success()
        {
            // Arrange
            var stateMachine = new FiniteStateMachine();

            // Create a state using the state machine
            var state = new State<int>(stateMachine, 1);

            // Act
            stateMachine.AddState(state);

            // Assert
            Assert.IsTrue(stateMachine.States.ContainsKey(1));
        }

        [Test]
        public void TestAddState_DifferentStateMachine_ThrowsException()
        {
            // Arrange
            var stateMachine1 = new FiniteStateMachine();
            var stateMachine2 = new FiniteStateMachine();

            // Create a state using a different state machine
            var state = new State<int>(stateMachine1, 1);

            // Act and Assert
            Assert.Throws<Exception>(() => stateMachine2.AddState(state));
        }
    }

    public class FiniteStateMachine
    {
        public Dictionary<int, State<int>> States { get; } = new Dictionary<int, State<int>>();

        public void AddState(State<int> state)
        {
            if (state.StateMachine != this)
            {
                throw new Exception("[FiniteStateMachine::AddState()] -> The State can only be added to the State Machine that was used to create it.");
            }
            this.States.Add(state.StateKey, state);
        }
    }

    public class State<T>
    {
        public FiniteStateMachine StateMachine { get; }
        public T StateKey { get; }

        public State(FiniteStateMachine stateMachine, T stateKey)
        {
            this.StateMachine = stateMachine;
            this.StateKey = stateKey;
        }
    }
}
