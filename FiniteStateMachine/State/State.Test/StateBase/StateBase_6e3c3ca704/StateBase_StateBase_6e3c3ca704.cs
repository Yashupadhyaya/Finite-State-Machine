// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;

namespace TestProject
{
    [TestFixture]
    public class StateBaseTest
    {
        [Test]
        public void TestStateBase_Success()
        {
            // Arrange
            var fsm = new FiniteStateMachine();
            var stateKey = new StateType();

            // Act
            var state = new StateBase(fsm, stateKey);

            // Assert
            Assert.IsNotNull(state);
            Assert.AreEqual(fsm, state.Fsm);
            Assert.AreEqual(stateKey, state.StateKey);
        }

        [Test]
        public void TestStateBase_NullParameters()
        {
            // Arrange
            FiniteStateMachine fsm = null;
            StateType stateKey = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new StateBase(fsm, stateKey));
        }

        [Test]
        public void TestStateBase_WithFsmNull()
        {
            // Arrange
            FiniteStateMachine fsm = null;
            var stateKey = new StateType();

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new StateBase(fsm, stateKey));
        }

        [Test]
        public void TestStateBase_WithStateKeyNull()
        {
            // Arrange
            var fsm = new FiniteStateMachine();
            StateType stateKey = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new StateBase(fsm, stateKey));
        }
    }

    public class FiniteStateMachine { }

    public class StateType { }

    public class StateBase
    {
        public FiniteStateMachine Fsm { get; set; }
        public StateType StateKey { get; set; }

        public StateBase(FiniteStateMachine fsm, StateType stateKey)
        {
            if (fsm == null)
                throw new ArgumentNullException(nameof(fsm));
            
            if (stateKey == null)
                throw new ArgumentNullException(nameof(stateKey));

            Fsm = fsm;
            StateKey = stateKey;
        }
    }
}
