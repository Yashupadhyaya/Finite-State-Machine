// Test generated by RoostGPT for test test-cs using AI Type Open AI and AI Model gpt-4

using System;
using NUnit.Framework;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    public class StateBase__End_3643a6cf0d
    {
        private MockStateBase _stateBase;
        private FiniteStateMachine _finiteStateMachine;

        [SetUp]
        public void Setup()
        {
            _finiteStateMachine = new FiniteStateMachine();
            _stateBase = new MockStateBase(_finiteStateMachine);
        }

        [Test]
        public void _End_MethodCalled_EndMethodCalled()
        {
            bool isEndCalled = false;
            _stateBase.SetEndAction(() => isEndCalled = true);

            _stateBase.End();

            Assert.IsTrue(isEndCalled);
        }

        [Test]
        public void _End_MethodCalled_OnStateEndedInvoked()
        {
            bool isOnStateEndedInvoked = false;
            _finiteStateMachine.OnStateEnded += (sender, args) => isOnStateEndedInvoked = true;

            _stateBase.End();

            Assert.IsTrue(isOnStateEndedInvoked);
        }

        [Test]
        public void _End_MethodCalled_OnStateEndedEventArgsNotNull()
        {
            FiniteStateEndedEventArgs args = null;
            _finiteStateMachine.OnStateEnded += (sender, eventArgs) => args = eventArgs;

            _stateBase.End();

            Assert.IsNotNull(args);
        }

        [Test]
        public void _End_MethodCalled_OnStateEndedEventArgsStateKeySameAsStateBaseStateKey()
        {
            FiniteStateEndedEventArgs args = null;
            _finiteStateMachine.OnStateEnded += (sender, eventArgs) => args = eventArgs;

            _stateBase.End();

            Assert.AreEqual(_stateBase.StateKey, args.State);
        }
    }

    public class MockStateBase : State<StateType>
    {
        private Action _endAction;

        public MockStateBase(FiniteStateMachine finiteStateMachine) : base(finiteStateMachine)
        {
        }

        public void SetEndAction(Action action)
        {
            _endAction = action;
        }

        public override void End()
        {
            _endAction?.Invoke();
        }

        public override void Load()
        {
            // Implement Load method
        }

        public override void Begin(FiniteStateChangeEventArgs args, StateType stateType)
        {
            // Implement Begin method
        }

        public override void Update(float deltaTime)
        {
            // Implement Update method
        }
    }
}
