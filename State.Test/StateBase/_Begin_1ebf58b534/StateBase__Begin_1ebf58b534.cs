// Test generated by RoostGPT for test test-cs using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using Moq;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    public interface IFiniteStateMachine
    {
        void OnStateBegan(FiniteStateBeganEventArgs args);
    }

    public class FiniteStateBeganEventArgs : EventArgs
    {
        public string PreviousStateKey { get; set; }
        public StateType StateType { get; set; }
    }

    public enum StateType
    {
        New
    }

    public class StateBase
    {
        private IFiniteStateMachine _finiteStateMachine;

        public StateBase(IFiniteStateMachine finiteStateMachine)
        {
            _finiteStateMachine = finiteStateMachine;
        }

        public void _Begin(FiniteStateBeganEventArgs args, string previousStateKey)
        {
            if (args == null)
            {
                throw new ArgumentNullException(nameof(args));
            }

            _finiteStateMachine.OnStateBegan(new FiniteStateBeganEventArgs { PreviousStateKey = previousStateKey, StateType = StateType.New });
        }
    }

    [TestFixture]
    public class StateBase__Begin_1ebf58b534
    {
        private Mock<IFiniteStateMachine> _mockFiniteStateMachine;
        private StateBase _stateBase;

        [SetUp]
        public void Setup()
        {
            _mockFiniteStateMachine = new Mock<IFiniteStateMachine>();
            _stateBase = new StateBase(_mockFiniteStateMachine.Object);
        }

        [Test]
        public void Test_Begin_WithValidEventArgs_ShouldInvokeOnStateBegan()
        {
            // Arrange
            var previousStateKey = "PreviousState";
            var eventArgs = new FiniteStateBeganEventArgs { PreviousStateKey = previousStateKey, StateType = StateType.New };

            // Act
            _stateBase._Begin(eventArgs, previousStateKey);

            // Assert
            _mockFiniteStateMachine.Verify(fsm => fsm.OnStateBegan(It.IsAny<FiniteStateBeganEventArgs>()), Times.Once);
        }

        [Test]
        public void Test_Begin_WithNullEventArgs_ShouldThrowException()
        {
            // Arrange
            FiniteStateBeganEventArgs eventArgs = null;
            var previousStateKey = "PreviousState";

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => _stateBase._Begin(eventArgs, previousStateKey));
        }
    }
}
