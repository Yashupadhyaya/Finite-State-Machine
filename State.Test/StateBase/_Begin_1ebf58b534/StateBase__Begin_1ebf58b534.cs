// Test generated by RoostGPT for test test-csharp5 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using Moq;
using FiniteStateMachine;
using System;

namespace FiniteStateMachine.Test
{
    public interface IStateBase
    {
        StateType StateKey { get; }
        void Begin(FiniteStateChangeEventArgs eventArgs, StateType previousStateKey);
    }

    public class StateType
    {
        public static StateType Idle = new StateType();
    }

    public class FiniteStateChangeEventArgs : EventArgs
    {
        public FiniteStateChangeEventArgs(StateType stateType)
        {
        }
    }

    public class FiniteStateBeganEventArgs : EventArgs
    {
        public FiniteStateBeganEventArgs(StateType stateType)
        {
        }
    }

    public class FiniteStateMachine
    {
        public class Instance
        {
            public event EventHandler<FiniteStateBeganEventArgs> OnStateBegan;

            public void RaiseOnStateBegan()
            {
                OnStateBegan?.Invoke(this, new FiniteStateBeganEventArgs(StateType.Idle));
            }
        }
    }

    [TestFixture]
    public class StateBase__Begin_1ebf58b534
    {
        [Test]
        public void _Begin_WhenCalled_ShouldInvokeOnStateBegan()
        {
            // Arrange
            var mockFiniteStateMachine = new Mock<FiniteStateMachine.Instance>();
            var mockStateBase = new Mock<IStateBase>();
            mockStateBase.Setup(sb => sb.StateKey).Returns(StateType.Idle);
            var eventArgs = new FiniteStateChangeEventArgs(StateType.Idle);
            var previousStateKey = StateType.Idle;

            // Act
            mockStateBase.Object.Begin(eventArgs, previousStateKey);

            // Assert
            mockFiniteStateMachine.Verify(fsm => fsm.RaiseOnStateBegan(), Times.Once);
        }

        [Test]
        public void _Begin_WhenCalled_ShouldCallBeginMethod()
        {
            // Arrange
            var mockFiniteStateMachine = new Mock<FiniteStateMachine.Instance>();
            var mockStateBase = new Mock<IStateBase>();
            var eventArgs = new FiniteStateChangeEventArgs(StateType.Idle);
            var previousStateKey = StateType.Idle;

            // Act
            mockStateBase.Object.Begin(eventArgs, previousStateKey);

            // Assert
            mockStateBase.Verify(sb => sb.Begin(eventArgs, previousStateKey), Times.Once);
        }
    }
}
